/**
 *  Express-Typescript Template.
 *  Server Entry.
 *
 *  @author LancerComet
 *  @license MIT
 */

import * as http from 'http'
import * as debugModule from 'debug'
import * as path from 'path'

import * as express from 'express'
import * as favicon from 'serve-favicon'
import * as logger from 'morgan'
import * as cookieParser from 'cookie-parser'
import * as bodyParser from 'body-parser'

import appConfig from './config'
import router from './routes'
import staticServing from './build'

import connectToDB from './database'


/**
 * Define a global variable "templates" to store html templates string.
 * HTML templates are generated by webpack and stored in memory.
 * You can't read template files that are stored in "./views" directly and render them in express router,
 * 
 * Instead, just get html string in "global.templates" and send it to browser.
 * 
 * @example
 *   const indexHTML = global.templates['index']
 */
global['templates'] = {}

;(async () => {
  // Uncomment the code below to connect to database.

  // try {
  //   await connectToDB()
  // } catch (error) {
  //   process.exit(1)
  // }

  const app = express()
  const debug = debugModule(`${appConfig.appInfo.name}:server`)

  // Initialize Express.
  const hostname = appConfig.server.host
  const port = appConfig.server.port

  app.set('views', path.join(__dirname, 'views'))
  app.set('view engine', 'jade')
  app.set('port', port)

  //app.use(favicon(path.join(__dirname, 'static', 'favicon.ico')))
  app.use(logger('dev'))
  app.use(bodyParser.json())
  app.use(bodyParser.urlencoded({ extended: false }))
  app.use(cookieParser())
  app.use('/public', express.static(path.join(__dirname, 'public')))

  // Init Static Files Serving.
  staticServing(app)

  // Initialize Router.
  router(app)

  // Start Server.
  const server = http.createServer(app)
  server.listen(port, hostname)

  server.on('error', error => {
    console.error(`[Error] Server startup failed: ${error}`)
    process.exit(1)
  })

  server.on('listening', () => {
    const msg = `
      Server is on at ${hostname}:${port}.
    `
    debug(msg)
    console.log(msg)
  })
})()
